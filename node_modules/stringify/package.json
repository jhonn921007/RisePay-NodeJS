{
  "name": "stringify",
  "description": "Browserify middleware to be able to require() text files (including templates) inside of your client-side JavaScript files.",
  "version": "2.2.0",
  "main": "./index.js",
  "author": {
    "name": "John Postlethwait",
    "email": "john.postlethwait@gmail.com"
  },
  "contributors": [
    {
      "name": "James Newell",
      "email": "james@digitaledgeit.com.au"
    },
    {
      "name": "Kevin Ingersoll",
      "email": "kingersoll@gmail.com"
    },
    {
      "name": "Livoras",
      "email": "livoras@163.com"
    }
  ],
  "website": "http://johnpostlethwait.github.com/stringify/",
  "keywords": [
    "browserify",
    "require",
    "template",
    "text",
    "txt",
    "client-side"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/JohnPostlethwait/stringify.git"
  },
  "engines": {
    "node": "*"
  },
  "licenses": [
    {
      "name": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "dependencies": {
    "through": "~2.3.4"
  },
  "devDependencies": {
    "mocha": "1.20.1",
    "should": "4.0.4"
  },
  "readme": "# Stringify #\n\nBrowserify plugin to require() text files (such as HTML templates) inside of your client-side JavaScript files.\n\n## Installation ##\n\n```bash\nnpm install stringify\n```\n\n## Usage ##\n\nSetup Browserify to use this middleware in your app:\n\n```javascript\nvar browserify = require('browserify'),\n    stringify = require('stringify');\n\nvar bundle = browserify()\n    .transform(stringify(['.hjs', '.html', '.whatever']))\n    .add('my_app_main.js');\n\napp.use(bundle);\n```\n\nYou might have noticed that you can pass stringify an optional array of file-extensions that you want to require() in your Browserify packages as strings. By default these are used: .html, .txt, .text, and .tmpl\n\n__NOTE__: You MUST call this as I have above. The Browserify .transform() method HAS to plug this middleware in to Browserify BEFORE you add the entry point (your main client-side file) for Browserify.\n\nNow, in your clientside files you can use require() as you would for JSON and JavaScript files, but include text files that have just been parsed into a JavaScript string:\n\n```javascript\nvar my_text = require('../path/to/my/text/file.txt');\n\nconsole.log(my_text);\n```\n\n## More Realistic Example & Use-Case ##\n\nThe reason I created this was to get string versions of my Handlebars templates required in to my client-side JavaScript. You can theoretically use this for any templating parser though.\n\nHere is how that is done:\n\napplication.js:\n```javascript\nvar browserify = require('browserify'),\n    stringify = require('stringify');\n\nvar bundle = browserify()\n    .transform(stringify(['.hbs', '.handlebars']))\n    .addEntry('my_app_main.js');\n\napp.use(bundle);\n```\n\nmy_app_main.js:\n```javascript\nvar Handlebars = require('handlebars'),\n    template = require('my/template/path.hbs'),\n    data = {\n      \"json_data\": \"This is my string!\"\n    };\n\nvar hbs_template = Handlebars.compile(template);\n\n// Now I can use hbs_template like I would anywhere else, passing it data and getting constructed HTML back.\nvar constructed_template = hbs_template(data);\n\n/*\n  Now 'constructed_template' is ready to be appended to the DOM in the page!\n  The result of it should be:\n\n  <p>This is my string!</p>\n*/\n```\n\nmy/template/path.hbs:\n```html\n<p>{{ json_data }}</p>\n```\n\n## Contributing ##\n\nIf you would like to contribute code, please do the following:\n\n1. Fork this repository and make your changes.\n2. Write tests for any new functionality. If you are fixing a bug that tests did not cover, please make a test that reproduces the bug.\n3. Add your name to the \"contributors\" section in the `package.json` file.\n4. Squash all of your commits into a single commit via `git rebase -i`.\n5. Run the tests by running `npm install && make test` from the source directory.\n6. Assuming those pass, send the Pull Request off to me for review!\n\nPlease do not iterate the package.json version number – I will do that myself when I publish it to NPM.\n\n### Style-Guide ###\n\nPlease follow this simple style-guide for all code contributions:\n\n* Indent using spaces.\n* camelCase all callables.\n* Place a space after a conditional or function name, and its conditions/arguments. `function (...) {...}`\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/JohnPostlethwait/stringify/issues"
  },
  "homepage": "https://github.com/JohnPostlethwait/stringify",
  "_id": "stringify@2.2.0",
  "_shasum": "f49034c22c9fdf257d2a8c7faea066a83ac72c1d",
  "_from": "stringify@*",
  "_resolved": "https://registry.npmjs.org/stringify/-/stringify-2.2.0.tgz"
}
